---
title: "Dexdash: Differential EXpression Downstream Analysis SHiny app"
package: dexdash
format:
  html:
    theme: css/styles.scss
    toc: true
self-contained: true
abstract: |
    This R package is designed for interactive exploration and analysis
    of differential expression (DE) results. It combines Shiny-based
    visualization tools with rapid functional enrichment analysis. Users
    can select genes from a volcano or MA plot to find their names,
    descriptions and plot expression patterns. The built-in fast functional
    enrichment (based on the fenr package) allows users to instantly see which
    biological pathways and processes those genes are involved in, based on
    enrichment analysis of Gene Ontology (GO), KEGG, and Reactome databases.
    The input for the app consists of five data frames containing DE results,
    expression or abundance data, experimental design, gene names and descriptions.
    A build-in function allowes for easy downloading of functional term data.
    Once started, the app is fast and easy to use.
vignette: >
  %\VignetteIndexEntry{Differential EXpression Downstream Analysis SHiny app}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
options(width = 96)
library(dexdash)
```


*dexdash* version `r utils::packageVersion("dexdash")`.


# Overview

Imagine you've carried out an RNA-seq experiment, a proteomics study, or another type of -omics research. You've done read mapping or protein quantifications and now have a set of data in hand. This data capture expression or abundance (we will call it 'expression' for simplicity) for each gene, protein, or other entity (hereinafter referred to as 'feature'). These expressions are recorded across various biological conditions (which we'll call 'groups') and their replicates. Following this, you've conducted a differential expression analysis using tools like *limma*, *edgeR*, *DESeq2*, or similar, ending up with a data frame that includes log-fold change, p-value, among other metrics.

Now, you're ready to investigate the results. You want to generate a volcano or MA plot, quickly identify features of interest, and explore the functional similarities among groups of features that behave similarly. This is exactly what *dexdash* is for. Simply feed it your expression data, differential expression results, and some details about your experimental design and gene names, and voil√†! You're equipped with a web-based interactive tool to explore your data.


# Installation

*dexdash* can be installed from *GitHub* by using:

```{r bioconductor_install, eval = FALSE}
if (!require("remotes", quietly = TRUE))
  install.packages("remotes")

remotes::install_github("bartongroup/dexdash")
```

# Quick example

```{r quick_example, eval = FALSE}
# Additional data is required to run this example
remotes::install_github("bartongroup/dexdata")

library(dexdash)
library(dexdata)

# Data examples available in the package
data(yeast_de, yeast_data, yeast_metadata)

# Create the dexdash data set
yeast_dexset <- dexdash_set(yeast_de, yeast_data, yeast_metadata, name = "Yeast")

# The slow bit: download feature information and functional term data
yeast_features <- download_feature_information(species = "yeast")
yeast_terms <- download_functional_terms(species = "yeast")
yeast_fterms <- prepare_functional_terms(yeast_terms, feature_name = "gene_id")

# The fast bit: interactive app
run_app(yeast_dexset, yeast_features, yeast_fterms)
```

# Full manual

The package [tutorial](https://www.compbio.dundee.ac.uk/user/mgierlinski/dexdash/dexdash.html) and the [reference manual](https://www.compbio.dundee.ac.uk/user/mgierlinski/dexdash/dexdash.pdf) are available on our server.
