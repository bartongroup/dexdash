---
title: "Dexdash: Differential EXpression Downstream Analysis SHiny app"
package: dexdash
format: 
  html:
    toc: true
abstract: |
    This R package is designed for interactive exploration and analysis
    of differential expression (DE) results. It combines Shiny-based
    visualization tools with rapid functional enrichment analysis. Users
    can select genes from a volcano or MA plot to find their names,
    descriptions and plot expression patterns. The build-in fast functional
    enrichment (based on `fenr` package) allows to see instantly which
    biological pathways and processes those genes are involved in, based on
    enrichment analysis of Gene Ontology (GO), KEGG, and Reactome databases.
    The input for the app consists of five data frames containing DE results,
    expression or abundance data, experimental design, gene names and descriptions.
    A build-in function allowes for easy downloading of functional term data.
    Once started, the app is fast and easy to use.
vignette: >
  %\VignetteIndexEntry{Differential EXpression Downstream Analysis SHiny app}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
options(width = 96)
library(tibble)
library(dplyr)
library(tidyr)
library(purrr)
library(forcats)
library(stringr)
library(edgeR)
library(dexdash)
```


*dexdash* version `r packageVersion("dexdash")`.


## Overview

Imagine you've carried out an RNA-seq experiment, a proteomics study, or maybe another type of -omics research. You've done read mapping or protein quantifications and now have a set of data in hand. This data captures expression or abundance (we will call it 'expression' for simplicity) for each gene, protein, or other entity (hereinafter referred to as 'feature'). These expressions are recorded across various biological conditions (which we'll call 'groups') and their replicates. Following this, you've conducted a differential expression analysis using tools like *limma*, *edgeR*, *DESeq2*, or similar, ending up with a data frame that includes log-fold change, p-value, among other metrics.

Now, you're ready to investigate the results. You want to generate a volcano or MA plot, quickly identify features of interest, and explore the functional similarities among groups of features that behave similarly. This is exactly what *dexdash* is for. Simply feed it your expression data, differential expression results, and some details about your experimental design and gene names, and voila! You're equipped with a web-based interactive tool to explore your data. A screenshow from *dexdash* app is shown in @fig-screenshot.

![Screenshot of *dexdash* Shiny app.](figures/screenshot.png){#fig-screenshot width=100% fig-align="left"}


## Installation

*dexdash* can be installed from *GitHub* by using:

```{r bioconductor_install, eval = FALSE}
if (!require("remotes", quietly = TRUE))
  install.packages("remotes")

remotes::install_github("bartongroup/dexdash")
```

## Quick example

```{r quick_example, eval = FALSE}
library(dexdash)

# Data examples available in the package
data(yeast_de, yeast_data, yeast_metadata)

# The slow bit: download feature information and functional term data
yeast_features <- download_feature_information(species = "yeast")
yeast_terms <- download_functional_terms(species = "yeast")
yeast_fterms <- prepare_functional_terms(yeast_terms, feature_name = "gene_id")

# The fast bit: interactive app
run_app(yeast_de, yeast_data, yeast_metadata, yeast_features, yeast_fterms)
```

## Usage

The *dexdash* Shiny app is launched with a command:

```{r usage, eval = FALSE}
run_app(de, data, metadata, features, fterms)
```

There are five mandatory arguments:

  - `de` - data frame with differential expression results,
  - `data` - data frame with expression or abundance data,
  - `metadata` - data frame with the design of the experiment,
  - `features` - data frame with feature names and descriptions,
  - `fterms` - an object containing functional terms data.


### User data: experimental results

There are three data frames containing experimental results, provided by the user. As differential expression output differs from tool to tool, it would be difficult to feed them directly into *dexdash*. Therefore, the user needs to rename data frame columns as shown in @tbl-data-columns. A fully worked example below demonstrates how to prepare the required data, step by step.

| argument | column | type | description |
|:-|:-|:-|:-----------|
| de |	id    | character |	feature identifier |
|    | log_fc |	numeric   |	log-fold change; use `logFC` from *edgeR* and *limma*, `log2FoldChange` from *DESeq2* |
|	   | expr | numeric | mean expression or abundance, typically in logarithmic scale; use `logCPM` from *edgeR*, `log10(baseMean)` from *DESeq2*, `AveExpr` from *limma* |
|    | p_value |	numeric | p-value from statistical tests; use `PValue` from *edgeR* and *limma*, `pvalue` from *DESeq2* |
|    | contrast | factor | name of the contrast; this data frame can contain results from multiple contrast |
| data | id |	character |	feature identifier |
|      | sample | character |	sample identifer |
|      | value |	numeric |	the expression, or abundance of the gene/protein for this sample |
| metadata | sample |	character	sample identifer |
|          | group |	character/factor |	a grouping variable, for example condition or treatment |
: Column names, types and descriptions for data frames with differential expression results (de), expression data (data) and experimental design (metadata). {#tbl-data-columns}


### Feature information

| argument | column | type | description |
|:-|:-|:-|:-----------|
| features | id         |	character |	feature identifier |
|          | name	      | character |	a human-readable name of the feature, typically a gene symbol |
|          | decription |	character |	a brief description of the feature |
: Column names, types and descriptions for data frame with feature (gene or protein) information. {#tbl-feature-columns}


Feature (gene or protein) information should be organised in a data frame with columns `id`, `name` and `description`, as explained in @tbl-feature-columns.

This data frame can be prepared by the user, but *dexdash* includes a helper function to download these data from Ensembl:

```{r eval = FALSE}
yeast_features <- download_feature_information(species = "yeast")
```

The necessary information to connect to the correct Ensembl dataset is stored in a JSON file attached to the package (see @sec-json for details).

### Functional term data

For fast interactive functional enrichment, *dexdash* requires data downloaded and formatted appropriately. This can be achieved with the following built-in functions:

```{r download_terms, eval = FALSE}
yeast_terms <- download_functional_terms(species = "yeast")
yeast_fterms <- prepare_functional_terms(terms, feature_name = "gene_id")
```

The first function, `download_functional_terms()`, retrieves functional term data and term-feature mappings from online databases, organizing them into two user-readable data frames (tibbles). This format allows users to verify that the data adheres to the necessary specifications. The `species` argument corresponds to an entry in the JSON file included with the package, which is detailed further in @sec-json.

The second function, `prepare_functional_terms()`, transforms these data frames into an object optimized for fast functional enrichment within *dexdash*, based on Bioconductor's *fenr* package. The `feature_name` argument designates which column in the mapping tibble acts as the feature identifier. For more details, refer to the *fenr* package [vignette](https://bioconductor.org/packages/release/bioc/vignettes/fenr/inst/doc/fenr.html). Depending on your dataset, `feature_name` should be set to `"gene_symbol"` if dealing with gene symbols like "BRCA1" or "FOXP1", or `"gene_id"` for Ensembl identifiers such as "ENSG00000012048" or "ENSG00000114861".

### Species JSON file {#sec-json}

Online databases such as GO, Reactome, KEGG, and Ensembl require specific species designations and dataset names for access, which are often not intuitive. For example, the designations for yeast are "sgd" in GO, "Saccharomyces cerevisiae" in Reactome, and "sce in KEGG. To make access easier, *dexdash* includes a JSON file containing these necessary identifiers along with Ensembl BioMart, host, and dataset details for various species. This file is located locally at:

```{r species_file}
species_file <- system.file("extdata", "species.json", package = "dexdash")
```

To check the species supported by *dexdash*, you can use:

```{r species}
list_species()
```

If your species is not listed, you need to create a JSON file in the same format, as the included file, and provide its location by argument `species_file` in the `download_functional_terms()` function.

Here is the entry for yeast in the JSON file:

```{r json_yeast, echo = FALSE, comment = ""}
json <- jsonlite::read_json(species_file)
json["yeast"] |> 
  jsonlite::toJSON(pretty = TRUE, auto_unbox = TRUE)
```

It is divided in two sections:

`"ontology"`: containing species designations needed to fetch data from GO, Reactome, and KEGG. These can be found by functions fenr::fetch_go_species(), fenr::fetch_reactome_species(), and fenr::fetch_kegg_species().

`"ensembl"`: detailing the BioMart, host, and dataset information required by `biomaRt::useMart()`, which varies for different organism groups such as plants and protists. These can be found using `biomaRt::listMarts()` and `biomaRt::listDatasets()`. For instance, this is the entry for *Dictyostelium discoideum* (commonly known as slime mold):

```{r json_dicty, echo = FALSE, comment = ""}
json <- jsonlite::read_json(species_file)
json["slime mold"] |> 
  jsonlite::toJSON(pretty = TRUE, auto_unbox = TRUE)

```



## Simple example


In this example we are given only one data set containing read counts from an RNA-seq experiment ([Gierlinski et al. 2015](https://doi.org/10.1093/bioinformatics/btv425)). It is a matrix `yeast_mtx`, with rows corresponding to genes and columns corresponding to samples. It contains the same data as the `yeast_data` object, but in wide, matrix format. We will demonstrate how to prepare all data required for *dexdash* from this one matrix.

We start with the packages needed for this example:

```{r yeast_libraries}
library(dexdash)
library(tibble)
library(dplyr)
library(tidyr)
library(forcats)
library(purrr)
library(stringr)
library(edgeR)
```

### Count data

Here is the count matrix.

```{r yeast_count_matrix}
data(yeast_mtx)
dim(yeast_mtx)
head(yeast_mtx)
```

### Metadata

First, we create metadata with grouping information. We extract group designation (WT or Snf2) form sample names (row names of `yeast_mtx`) and convert them into factors, with the first level `WT`. As per *dexdash* requirements, the column names of this data frame are `sample` and `group`:

```{r yeast_metadata}
yeast_metadata <- tibble(sample = colnames(yeast_mtx)) |> 
  mutate(group = str_extract(sample, "^.+(?=-)")) |> 
  mutate(group = fct_relevel(group, "WT"))

yeast_metadata
```

### Differential expression

Next, we carry out differential expression using *edgeR*. This is a simple case of two conditions (groups), each in six replicates. Again, we need specific column names for *dexdash*. If you use a different differential expression tool, the default column names would be different. In any case, they need to be `id`, `log_fc`, `expr`, `p_value`, and `contrast` (see @tbl-data-columns). Whichever DE tool you use, make sure to rename the columns before passing the result to `dexdash`.

```{r yeast_differential_expression}
design_mat <- model.matrix(~group, yeast_metadata)

dge <- DGEList(yeast_mtx)
keep <- filterByExpr(dge, design_mat)

yeast_de <- dge[keep, ] |> 
  normLibSizes() |>
  glmQLFit(design = design_mat) |>
  glmQLFTest(coef = "groupSnf2") |>
  topTags(n = 1e16, sort.by = "none") |>
  pluck("table") |>
  as_tibble(rownames = "id") |>
  add_column(contrast = "Snf2-WT") |> 
  rename(
    log_fc = logFC,
    expr = logCPM,
    p_value = PValue
  )

yeast_de
```

### Count data in long format

`dexdash` requires count data in long format, with column names `id`, `sample` and `value`. We create the appropriate data frame:

```{r yeast_long_format}
yeast_data <- yeast_mtx |> 
  as_tibble(rownames = "id") |> 
  pivot_longer(-id, names_to = "sample", values_to = "value")

yeast_data
```

### Feature names and descriptions

Next, we need a table converting gene identifiers into human-readable gene names and descriptions. This can be done with the helper function `download_feature_information()`:

```{r load_yeast_features, echo = FALSE}
data(yeast_features)
```

```{r yeast_features, eval = FALSE}
yeast_features <- download_feature_information(species = "yeast")
```

```{r show_yeast_features}
yeast_features |>
  arrange(name)
```


### Functional enrichment data

Finally, as indicated earlier, we need the functional enrichment data. This is done in two steps:

```{r yeast_download_terms_2, eval = FALSE}
yeast_terms <- download_functional_terms("yeast")
yeast_fterms <- prepare_functional_terms(yeast_terms, feature_name = "gene_id")
```

### Run dexdash

Now, we have all necessary data to launch `dexdash`:

```{r yeast_run_app, eval = FALSE}
run_app(yeast_de, yeast_data, yeast_metadata, yeast_features, yeast_fterms)
```

## Advanced example

Here we show an example of data, where feature identifiers do not correspond directly to those in the online databases. The data comes from a mouse RNA-seq experiment (originally from [Blümli et al. (2021)](https://www.sciencedirect.com/science/article/pii/S2211124721014169?via%3Dihub). Here we use only three time points.

Again, we need the following packages loaded:

```{r mouse_libraries}
library(dexdash)
library(tibble)
library(dplyr)
library(tidyr)
library(forcats)
library(purrr)
library(stringr)
library(edgeR)
```

### Messing with identifiers

Struggling with identifiers is all in a day's work of a bioinformatician. Alas, there are no unified gene of protein identifiers in this imperfect word, and getting data from various sources inevitable leads to inconsistencies. This is our read count matrix:

```{r mouse_matrix}
data(mouse_mtx)
head(mouse_mtx)
```

Genes are identified by Ensemble gene IDs. Let us have a look at the mouse functional term information, downloaded from GO, Reactome and KEGG. First, we download terms and mappings:

```{r load_mouse_terms, include = FALSE}
data(mouse_terms)
```

```{r mouse_terms, eval = FALSE}
mouse_terms <- download_functional_terms(species = "mouse")
```

It is a nested list, the first level corresponds to the "ontology", that is `go`, `reactome` and `kegg`. Each ontology consists of two data frames, `mapping` - containing feature-term mapping and `terms` - containing term information. Let's look at a random selection of rows in feature-to-term mapping tables:

```{r mouse_mappings}
set.seed(42)
mouse_terms$go$mapping |> slice_sample(n = 10)

mouse_terms$reactome$mapping |> slice_sample(n = 10)

mouse_terms$kegg$mapping |> slice_sample(n = 10)
```

We have a problem. Our data uses Ensembl IDs, but out of the three databases, only Reactome provides with Ensembl IDs. GO returns gene aliases and KEGG uses NCBI IDs. We need put all these data together. The only common identifier is the gene symbol, returned by all three databases. To make it consistent with our data, we need to convert Ensembl IDs into gene symbols. For this, we use the function `download_feature_information()`:


```{r load_mouse_genes, echo = FALSE}
data(mouse_genes)
```

```{r mouse_gnenes, eval = FALSE}
mouse_genes <- download_feature_information(species = "mouse")
```

```{r show_mouse_genes}
mouse_genes
```

It returns a data frame linking Ensembl IDs and gene symbols. It also provides with gene descriptions, which we are going to need later. From this data frame we create a new one:

```{r mouse_id2symbol}
id2symbol <- tibble(
  rowname = rownames(mouse_mtx),
  id = rowname |> 
     str_remove("\\.\\d+$")
) |> 
  inner_join(mouse_genes, by = "id") |> 
  mutate(gene_id = toupper(name))

id2symbol
```

It contains rownames from the count table (`rowname`), the extracted Ensembl ID (`id`), with gene annotation version numbers (e.g. `.1`) removed. This data frame is joined with our gene data frame. In addition, we converted gene symbols into upper case (column `gene_id`). This is another issue - different sources provide gene symbols in different capitalisation. Sometimes, the first letter is in capitals, sometimes the entire gene symbol is capitalised. To circumvent this issue our function `download_functional_terms()` automatically capitalises all gene symbols, hence, we need to do the same in the `id2symbol` structure.

Having prepared all of this, we can rename rows in the count table:

```{r rename_mtx_rows}
renamed_mtx <- mouse_mtx[id2symbol$rowname, ]
rownames(renamed_mtx) <- id2symbol$gene_id

head(renamed_mtx)
```

Now, we have consistent identifers in count data and functional enrichment data. We can now proceed.

### Metadata

Like before, we create a metadata data frame with experiment grouping:

```{r mouse_metadata}
mouse_metadata <- tibble(sample = colnames(renamed_mtx)) |> 
  mutate(group = str_extract(sample, "^.+(?=-)")) |> 
  mutate(group = fct_relevel(group, c("0h", "2h", "18h")))

mouse_metadata
```

### Differential expression

Differential expression if carried out with *edgeR*, like for the yeast data, but this time we have more than one contrast. We select timepoint `0h` as the baseline and find contrasts between this and other time points.

```{r mouse_differential_expression}
design_mat <- model.matrix(~group, mouse_metadata)
coefficients <- colnames(design_mat)[-1]

dge <- DGEList(renamed_mtx)
keep <- filterByExpr(dge, design_mat)
fit <- dge[keep, ] |> 
  normLibSizes() |>
  glmQLFit(design = design_mat)

mouse_de <- map(coefficients, function(coef) {
  fit |> 
    glmQLFTest(coef = coef) |> 
    topTags(n = 1e16, sort.by = "none") |>
    pluck("table") |>
    as_tibble(rownames = "id") |>
    add_column(contrast = coef)
}) |> 
  list_rbind() |> 
  rename(
    log_fc = logFC,
    expr = logCPM,
    p_value = PValue
  )

mouse_de
```

### Count data in long format

We need data in long format:

```{r mouse_long_format}
mouse_data <- renamed_mtx |> 
  as_tibble(rownames = "id") |> 
  pivot_longer(-id, names_to = "sample", values_to = "value")

mouse_data
```

### Feature names and descriptions

For the Shiny app, a feature information table is needed to link feature identifiers (capitalised gene symbols), feature names (original gene symbols) and descriptions. The columns needed are described in @tbl-feature-columns. Here is how we prepare the required tibble:

```{r new_mouse_features}
mouse_features <- mouse_genes |> 
  mutate(id = toupper(name))

mouse_features
```

### Functional enrichment data

Finally, we need to prepare functional enrichment data in the fast enrichment format. We specify `feature_name = "gene_symbol"` to inform the function which column should be used to identify features.

```{r mouse_prepare_terms}
mouse_fterms <- prepare_functional_terms(mouse_terms, feature_name = "gene_symbol")
```

### Run dexdash

Now, we have all necessary data to launch `dexdash`:

```{r mouse_run_app, eval = FALSE}
run_app(mouse_de, mouse_data, mouse_metadata, mouse_features, mouse_fterms)
```




## Comparison with other tools

### iDEP

*[iDEP](http://bioinformatics.sdstate.edu/idep/)* is a flexible web-based tool that supports full data analysis, starting from the count matrix. It includes pre-processing, clustering, PCA, differential expression, KEGG pathway analysis and more. While it generates volcano and MA plots, they lack fast interactivity. In particular, pathway analysis in *iDEP* if only performed on down- or up-regulated genes. In contrast, *dexdash* is smaller and more focussed on interactivity, visualisation and fast functional enrichment on any arbitrary gene selection. Additionally, *dexdash* suports GO and Reactome functional terms, alongside with KEGG.

### ShinyGO

*[ShinyGO](http://bioinformatics.sdstate.edu/go/)* is a web-base Shiny app for comprehensive KEGG pathway enrichment analysis. Users can submit a list of gene names for analysis, which then provides various outputs. In contrast, *dexdash* works on differential expression result set and creates interactive volcano/MA plots for fast repeated gene selection and simple GO, KEGG and Reactome enrichment analysis.

### Glimma

*[Glimma](https://bioconductor.org/packages/release/bioc/html/Glimma.html)* is a Bioconductor R package designed to create interactive MDS, MA and volcano plots. Users can explore gene expression patterns by selecting individual genes. By contrast, *dexdash* allows for multiple gene selection, functional enrichment analysis and reverse selection of functional terms to find functionally related genes. 


### Other packages

*[VolcaNoseR](https://huygens.science.uva.nl/VolcaNoseR/)* is a simple customisable volcano plot with no additional functionality. *clusterProfiler*, *ReactomePA*, *GOplot* and *topGO* provide robust tools for enrichment analysis but do not offer the interactive, user-driven experience found in *dexdash*.

## Session info {.unnumbered}

```{r session_info, echo = FALSE}
sessionInfo()
```
